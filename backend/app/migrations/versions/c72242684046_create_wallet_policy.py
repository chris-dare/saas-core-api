"""create_wallet_policy

Revision ID: c72242684046
Revises: 8edb44ce233c
Create Date: 2023-12-29 19:00:11.535392

"""
import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision = "c72242684046"
down_revision = "8edb44ce233c"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "healthcare_policies",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "contribution_type",
            sa.String(length=15),
            nullable=True,
            comment="Type of contribution (copay of coinsurance). Defaults to coinsurance",
        ),
        sa.Column("currency", sa.String(length=15), nullable=True),
        sa.Column("pk", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("uuid", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column(
            "coinsurance",
            sa.DECIMAL(precision=3, scale=2),
            nullable=True,
            comment="The percentage of covered medical expenses a user pays after they've met their deductible. On a scale of 0 to 1, where 1 is 100%",
        ),
        sa.Column(
            "copay_amount",
            sa.DECIMAL(precision=18, scale=2),
            nullable=True,
            comment="The set amount a user pays to their medical provider when they receive services. These are overidden by service specific copay amounts",
        ),
        sa.Column(
            "deductible",
            sa.DECIMAL(precision=18, scale=2),
            nullable=True,
            comment="The total cost a user pays on health care before the health plan starts covering any expenses",
        ),
        sa.Column(
            "out_of_pocket_limit",
            sa.DECIMAL(precision=18, scale=2),
            nullable=True,
            comment="The total amount a user must spend on eligible healthcare expenses through copays, coinsurance, or deductibles before the health plan starts covering all covered expenses",
        ),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name_chars", sa.VARCHAR(length=70), nullable=False),
        sa.Column(
            "managing_organization_id",
            sqlmodel.sql.sqltypes.GUID(),
            nullable=False,
            comment="ID of organization managing this policy",
        ),
        sa.Column(
            "managing_organization_name",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
        ),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "is_core",
            sa.Boolean(),
            nullable=True,
            comment="A flag indicating whether the policy is a core policy. Core policies cannot be deleted",
        ),
        sa.Column(
            "is_deleted",
            sa.Boolean(),
            nullable=False,
            comment="Flag to mark policy's active status",
        ),
        sa.ForeignKeyConstraint(
            ["managing_organization_id"],
            ["organizations.uuid"],
        ),
        sa.PrimaryKeyConstraint("pk"),
        sa.UniqueConstraint(
            "name",
            "managing_organization_id",
            name="policy__name__managing_organization_uc",
        ),
        sa.UniqueConstraint(
            "name_chars",
            "managing_organization_id",
            name="policy__name_chars__managing_organization_uc",
        ),
    )
    op.create_index(
        op.f("ix_healthcare_policies_contribution_type"),
        "healthcare_policies",
        ["contribution_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_healthcare_policies_currency"),
        "healthcare_policies",
        ["currency"],
        unique=False,
    )
    op.create_index(
        op.f("ix_healthcare_policies_managing_organization_id"),
        "healthcare_policies",
        ["managing_organization_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_healthcare_policies_name"),
        "healthcare_policies",
        ["name"],
        unique=True,
    )
    op.create_index(
        op.f("ix_healthcare_policies_pk"), "healthcare_policies", ["pk"], unique=False
    )
    op.create_index(
        op.f("ix_healthcare_policies_uuid"),
        "healthcare_policies",
        ["uuid"],
        unique=True,
    )
    op.create_index(
        op.f("ix_healthcare_policies_name_chars"),
        "healthcare_policies",
        ["name_chars"],
        unique=True,
    )
    op.add_column(
        "wallets",
        sa.Column(
            "contribution_type",
            sa.String(length=15),
            nullable=True,
            comment="Type of contribution (copay of coinsurance). Defaults to coinsurance",
        ),
    )
    op.add_column(
        "wallets",
        sa.Column(
            "coinsurance",
            sa.DECIMAL(precision=3, scale=2),
            nullable=True,
            comment="The percentage of covered medical expenses a user pays after they've met their deductible. On a scale of 0 to 1, where 1 is 100%",
        ),
    )
    op.add_column(
        "wallets",
        sa.Column(
            "copay_amount",
            sa.DECIMAL(precision=18, scale=2),
            nullable=True,
            comment="The set amount a user pays to their medical provider when they receive services. These are overidden by service specific copay amounts",
        ),
    )
    op.add_column(
        "wallets",
        sa.Column(
            "deductible",
            sa.DECIMAL(precision=18, scale=2),
            nullable=True,
            comment="The total cost a user pays on health care before the health plan starts covering any expenses",
        ),
    )
    op.add_column(
        "wallets",
        sa.Column(
            "out_of_pocket_limit",
            sa.DECIMAL(precision=18, scale=2),
            nullable=True,
            comment="The total amount a user must spend on eligible healthcare expenses through copays, coinsurance, or deductibles before the health plan starts covering all covered expenses",
        ),
    )
    op.add_column(
        "wallets",
        sa.Column(
            "policy_id",
            sqlmodel.sql.sqltypes.GUID(),
            nullable=True,
            comment="ID of current healthcare policy applied to the wallet",
        ),
    )
    op.add_column(
        "wallets",
        sa.Column(
            "policy_name",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
            comment="Name of current healthcare policy applied to the wallet",
        ),
    )
    op.create_index(
        op.f("ix_wallets_contribution_type"),
        "wallets",
        ["contribution_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_wallets_policy_id"), "wallets", ["policy_id"], unique=False
    )
    op.create_foreign_key(
        constraint_name="wallet__policy_id__fk",
        source_table="wallets",
        referent_table="healthcare_policies",
        local_cols=["policy_id"],
        remote_cols=["uuid"],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("wallet__policy_id__fk", "wallets", type_="foreignkey")
    op.drop_index(op.f("ix_wallets_policy_id"), table_name="wallets")
    op.drop_index(op.f("ix_wallets_contribution_type"), table_name="wallets")
    op.drop_column("wallets", "policy_name")
    op.drop_column("wallets", "policy_id")
    op.drop_column("wallets", "out_of_pocket_limit")
    op.drop_column("wallets", "deductible")
    op.drop_column("wallets", "copay_amount")
    op.drop_column("wallets", "coinsurance")
    op.drop_column("wallets", "contribution_type")
    op.drop_index(op.f("ix_healthcare_policies_name_chars"), table_name="organizations")
    op.drop_index(op.f("ix_healthcare_policies_uuid"), table_name="healthcare_policies")
    op.drop_index(op.f("ix_healthcare_policies_pk"), table_name="healthcare_policies")
    op.drop_index(op.f("ix_healthcare_policies_name"), table_name="healthcare_policies")
    op.drop_index(
        op.f("ix_healthcare_policies_managing_organization_id"),
        table_name="healthcare_policies",
    )
    op.drop_index(
        op.f("ix_healthcare_policies_currency"), table_name="healthcare_policies"
    )
    op.drop_index(
        op.f("ix_healthcare_policies_contribution_type"),
        table_name="healthcare_policies",
    )
    op.drop_table("healthcare_policies")
    # ### end Alembic commands ###
