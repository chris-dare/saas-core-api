version: "3.3"
services:

  proxy:
    container_name: proxy
    ports:
      - "80:80"
      - "8090:8080"
    image: traefik:v2.2
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Disable Docker Swarm mode for local development
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      - traefik.enable=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-traefik-public.loadbalancer.server.port=80


  db:
    image: postgres:12
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    deploy:
      placement:
        constraints:
          - node.labels.${STACK_NAME?Variable not set}.app-db-data == true

  backend:
    ports:
        - "8888:8888"
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}
    command: /start-reload.sh
    environment:
      FIRST_SUPERUSER: ${FIRST_SUPERUSER?Variable not set}
      FIRST_SUPERUSER_PASSWORD: ${FIRST_SUPERUSER_PASSWORD?Variable not set}
      POSTGRES_DB: ${POSTGRES_DB?Variable not set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?Variable not set}
      POSTGRES_PORT: ${POSTGRES_PORT?Variable not set}
      POSTGRES_SERVER: ${POSTGRES_SERVER?Variable not set}
      POSTGRES_USER: ${POSTGRES_USER?Variable not set}
      PROJECT_NAME: ${PROJECT_NAME?Variable not set}
      SECRET_KEY: ${SECRET_KEY?Variable not set}
      SENTRY_DSN: ${SENTRY_DSN?Variable not set}
      SERVER_NAME: ${PROJECT_NAME?Variable not set}
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS?Variable not set}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY-""}
      SEGMENT_WRITE_KEY: ${SEGMENT_WRITE_KEY?Variable not set}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID-""}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN-""}
      TWILIO_MESSAGING_SERVICE_SID: ${TWILIO_MESSAGING_SERVICE_SID-""}


    volumes:
      - ./backend:/app
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/`)
      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80


volumes:
  app-db-data:

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-false}
